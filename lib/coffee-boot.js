// Generated by CoffeeScript 1.6.3
(function() {
  var CoffeeBoot, Module, basename, buildModule, coffeeLoad, dirname, fileext, getFileModule, rstrip, wget;

  window.CoffeeBoot = CoffeeBoot = {};

  CoffeeBoot.boot = function(url, entry) {
    var loader;
    if (entry == null) {
      entry = 'scripts/main';
    }
    loader = (function() {
      switch (fileext(url)) {
        case 'json':
          return function() {
            return wget(url, 'text', function(manifest) {
              return buildModule(JSON.parse(manifest), dirname(url), function(module) {
                return CoffeeBoot.main = module.require(entry);
              });
            });
          };
        case 'tar':
          return function() {
            return wget(url, 'arraybuffer', function(buffer) {
              return buildModule(Tar.extract(buffer), url, function(module) {
                return CoffeeBoot.main = module.require(entry);
              });
            });
          };
        default:
          throw Error("unknown package format " + (fileext(url)));
      }
    })();
    return window.addEventListener('load', loader);
  };

  buildModule = function(records, urlprefix, callback) {
    var buffer, directory, loadedModules, module, moduleLoaded, newmodule, path, totalModules, type, _i, _len, _ref;
    module = new Module('directory');
    loadedModules = 0;
    totalModules = 0;
    moduleLoaded = function() {
      if (++loadedModules >= totalModules) {
        return callback(module);
      }
    };
    for (_i = 0, _len = records.length; _i < _len; _i++) {
      _ref = records[_i], path = _ref.path, type = _ref.type, buffer = _ref.buffer;
      newmodule = new Module(type);
      newmodule.basename = basename(path);
      if (type === 'file' && (buffer == null)) {
        getFileModule(newmodule, urlprefix + path, moduleLoaded);
        totalModules++;
      } else {
        newmodule.buffer = buffer;
        newmodule.url = urlprefix + path;
      }
      directory = module.resolve(dirname(path), false);
      directory.submodules[newmodule.basename] = newmodule;
      newmodule.parent = directory;
    }
    if (totalModules === 0) {
      return callback(module);
    }
  };

  getFileModule = function(module, url, callback) {
    return wget(url, 'arraybuffer', function(buffer) {
      module.url = url;
      module.buffer = buffer;
      return callback();
    });
  };

  wget = function(url, type, success) {
    var xhr;
    xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = type;
    xhr.onload = function() {
      if (this.status === 200) {
        return success(this.response);
      }
    };
    return xhr.send();
  };

  Module = (function() {
    function Module(type, basename, buffer, url) {
      this.type = type;
      this.basename = basename;
      this.buffer = buffer != null ? buffer : null;
      this.url = url != null ? url : null;
      this.submodules = {};
      this.parent = null;
    }

    Module.prototype.getRoot = function() {
      if (this.parent != null) {
        return this.parent.getRoot();
      }
      return this;
    };

    Module.prototype.resolve = function(path, route) {
      var current, name, parent, _i, _len, _ref, _ref1;
      if (path == null) {
        path = '';
      }
      if (route == null) {
        route = true;
      }
      path = rstrip(path, '/');
      if (path === '.') {
        path = '';
      }
      if (path.slice(0, 2) === './') {
        path = path.slice(2);
      }
      current = (function() {
        switch (this.type) {
          case 'file':
            return this.parent;
          case 'directory':
            return this;
        }
      }).call(this);
      if (path[0] === '/') {
        current = current.getRoot();
        path = path.slice(1);
      }
      if (path === '') {
        return current;
      }
      parent = current.parent;
      _ref = path.split('/');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        name = _ref[_i];
        parent = current;
        if (current != null) {
          current = current.submodules[name];
        }
      }
      if (route) {
        if ((parent != null) && (current == null)) {
          current = parent.submodules[name + '.coffee'];
        }
        current = (_ref1 = current.submodules['index.coffee']) != null ? _ref1 : current;
      }
      return current;
    };

    Module.prototype.require = function(path) {
      var module;
      if (path == null) {
        path = '';
      }
      module = this.resolve(path);
      if (module == null) {
        throw Error("cannot access module " + path);
      }
      if (fileext(module.basename) === 'coffee') {
        if (module.exports != null) {
          return module.exports;
        }
        module.exports = {};
        module.loaded = false;
        module.sources = TextDecoder('utf-8').decode(new Uint8Array(module.buffer));
        coffeeLoad(module.sources, module.url, {
          module: module,
          exports: module.exports,
          require: function(path) {
            if (path == null) {
              path = '';
            }
            return module.require(path);
          }
        });
        module.loaded = true;
        return module.exports;
      } else {
        return module.buffer;
      }
    };

    return Module;

  })();

  coffeeLoad = function(source, sourceURL, namespace) {
    var arg, args, js, name, vars;
    js = CoffeeScript.compile(source, {
      bare: true
    });
    js += "\n//# sourceURL=" + sourceURL;
    vars = [];
    args = [];
    for (name in namespace) {
      arg = namespace[name];
      vars.push(name);
      args.push(arg);
    }
    vars.push(js);
    return ((function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Function, vars, function(){})).apply(null, args);
  };

  basename = function(path) {
    var base, ch, directory, shift, _i, _len;
    directory = '';
    base = '';
    shift = false;
    for (_i = 0, _len = path.length; _i < _len; _i++) {
      ch = path[_i];
      if (shift) {
        directory += base + '/';
        base = '';
        shift = false;
      }
      if (ch === '/') {
        shift = true;
      } else {
        base += ch;
      }
    }
    return base;
  };

  dirname = function(path) {
    var base, ch, directory, shift, _i, _len;
    directory = '';
    base = '';
    shift = false;
    for (_i = 0, _len = path.length; _i < _len; _i++) {
      ch = path[_i];
      if (shift) {
        directory += base + '/';
        base = '';
        shift = false;
      }
      if (ch === '/') {
        shift = true;
      } else {
        base += ch;
      }
    }
    return directory;
  };

  rstrip = function(string, ch) {
    var i;
    i = string.length - 1;
    while (i >= 0 && string[i] === ch) {
      i--;
    }
    return string.slice(0, +i + 1 || 9e9);
  };

  fileext = function(path) {
    var a;
    a = path.split('.');
    if (a.length === 1 || (a[0] === "" && a.length === 2)) {
      return "";
    }
    return a.pop();
  };

}).call(this);
