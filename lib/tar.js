// Generated by CoffeeScript 1.6.3
(function() {
  var Tar, pad512, readRecord, readString, strlen, zeroFilled;

  Tar = this.Tar = {};

  Tar.extract = function(buffer, offset) {
    var record, records;
    if (offset == null) {
      offset = 0;
    }
    records = [];
    while (!zeroFilled(buffer, offset, 1024)) {
      records.push(record = readRecord(buffer, offset));
      offset += 512 + pad512(record.buffer.byteLength);
    }
    return records;
  };

  readRecord = function(buffer, offset) {
    var size, typeFlag;
    if (readString(buffer, offset + 257, 5) !== "ustar") {
      throw Error("not a valid tar archive");
    }
    typeFlag = readString(buffer, offset + 156, 1);
    size = parseInt(readString(buffer, offset + 124, 12), 8);
    return {
      path: readString(buffer, offset, 100),
      buffer: buffer.slice(offset + 512, offset + 512 + size),
      type: (function() {
        switch (typeFlag) {
          case '0':
            return 'file';
          case '5':
            return 'directory';
          default:
            return typeFlag;
        }
      })()
    };
  };

  readString = function(buffer, offset, length) {
    var u8;
    u8 = new Uint8Array(buffer, offset, length);
    u8 = new Uint8Array(buffer, offset, strlen(u8));
    return TextDecoder('utf-8').decode(u8);
  };

  strlen = function(u8) {
    var i, _i, _ref;
    for (i = _i = 0, _ref = u8.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      if (u8[i] === 0) {
        return i;
      }
    }
    return u8.length;
  };

  zeroFilled = function(buffer, offset, count) {
    var u8, x, _i, _len;
    u8 = new Uint8Array(buffer, offset);
    for (_i = 0, _len = u8.length; _i < _len; _i++) {
      x = u8[_i];
      if (x !== 0) {
        return false;
      }
    }
    return true;
  };

  pad512 = function(x) {
    return x + (512 - x % 512) % 512;
  };

}).call(this);
